<?php

namespace App\Entity\User;

use ApiPlatform\Metadata\ApiResource;
use ApiPlatform\Metadata\Delete;
use ApiPlatform\Metadata\Get;
use ApiPlatform\Metadata\GetCollection;
use ApiPlatform\Metadata\Patch;
use ApiPlatform\Metadata\Post;
use App\Controller\Providers\GetProviderPatients;
use App\Entity\Group;
use App\Entity\Tour;
use App\Repository\User\ProviderRepository;
use Doctrine\Common\Collections\ArrayCollection;
use Doctrine\Common\Collections\Collection;
use Doctrine\ORM\Mapping as ORM;

#[ORM\Entity(repositoryClass: ProviderRepository::class)]
#[ApiResource(
    operations: [
        new Get(),
        new GetCollection(),
        new GetCollection(
            uriTemplate: '/providers/{id}/patients',
            controller: GetProviderPatients::class,
            normalizationContext: [
                'groups' => ['patient:read']
            ],
            denormalizationContext: [
                'groups' => ['patient:write']
            ]
        ),
        new Post(),
        new Patch(),
        new Delete()
    ]
)]
class Provider extends User
{
    #[ORM\ManyToMany(targetEntity: Patient::class, mappedBy: 'Providers')]
    private Collection $patients;

    #[ORM\ManyToMany(targetEntity: Group::class, inversedBy: 'providers')]
    private Collection $groups;

    #[ORM\OneToMany(mappedBy: 'provider', targetEntity: Tour::class)]
    private Collection $tours;

    public function __construct()
    {
        $this->patients = new ArrayCollection();
        $this->groups = new ArrayCollection();
        $this->tours = new ArrayCollection();
    }

    public function getRoles(): array
    {
        $roles = parent::getRoles(); // TODO: Change the autogenerated stub
        $roles[] = 'ROLE_PROVIDER';

        return array_unique($roles);
    }

    /**
     * @return Collection<int, Patient>
     */
    public function getPatients(): Collection
    {
        return $this->patients;
    }

    public function addPatient(Patient $patient): self
    {
        if (!$this->patients->contains($patient)) {
            $this->patients->add($patient);
            $patient->addProvider($this);
        }

        return $this;
    }

    public function removePatient(Patient $patient): self
    {
        if ($this->patients->removeElement($patient)) {
            $patient->removeProvider($this);
        }

        return $this;
    }

    /**
     * @return Collection<int, Group>
     */
    public function getGroups(): Collection
    {
        return $this->groups;
    }

    public function addGroup(Group $group): self
    {
        if (!$this->groups->contains($group)) {
            $this->groups->add($group);
        }

        return $this;
    }

    public function removeGroup(Group $group): self
    {
        $this->groups->removeElement($group);

        return $this;
    }

    /**
     * @return Collection<int, Tour>
     */
    public function getTours(): Collection
    {
        return $this->tours;
    }

    public function addTour(Tour $tour): self
    {
        if (!$this->tours->contains($tour)) {
            $this->tours->add($tour);
            $tour->setProvider($this);
        }

        return $this;
    }

    public function removeTour(Tour $tour): self
    {
        if ($this->tours->removeElement($tour)) {
            // set the owning side to null (unless already changed)
            if ($tour->getProvider() === $this) {
                $tour->setProvider(null);
            }
        }

        return $this;
    }
}
